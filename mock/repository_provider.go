// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zde37/Swift_Bank/repository (interfaces: RepositoryProvider)
//
// Generated by this command:
//
//	mockgen -package mockedproviders -destination mock/repository_provider.go github.com/zde37/Swift_Bank/repository RepositoryProvider
//

// Package mockedproviders is a generated GoMock package.
package mockedproviders

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	models "github.com/zde37/Swift_Bank/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryProvider is a mock of RepositoryProvider interface.
type MockRepositoryProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryProviderMockRecorder
}

// MockRepositoryProviderMockRecorder is the mock recorder for MockRepositoryProvider.
type MockRepositoryProviderMockRecorder struct {
	mock *MockRepositoryProvider
}

// NewMockRepositoryProvider creates a new mock instance.
func NewMockRepositoryProvider(ctrl *gomock.Controller) *MockRepositoryProvider {
	mock := &MockRepositoryProvider{ctrl: ctrl}
	mock.recorder = &MockRepositoryProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryProvider) EXPECT() *MockRepositoryProviderMockRecorder {
	return m.recorder
}

// AddAccountBalance mocks base method.
func (m *MockRepositoryProvider) AddAccountBalance(arg0 context.Context, arg1 int64, arg2 float64) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccountBalance indicates an expected call of AddAccountBalance.
func (mr *MockRepositoryProviderMockRecorder) AddAccountBalance(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountBalance", reflect.TypeOf((*MockRepositoryProvider)(nil).AddAccountBalance), arg0, arg1, arg2)
}

// CreateAccount mocks base method.
func (m *MockRepositoryProvider) CreateAccount(arg0 context.Context, arg1 models.Account) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockRepositoryProviderMockRecorder) CreateAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockRepositoryProvider)(nil).CreateAccount), arg0, arg1)
}

// CreateEntry mocks base method.
func (m *MockRepositoryProvider) CreateEntry(arg0 context.Context, arg1 models.Entry) (models.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", arg0, arg1)
	ret0, _ := ret[0].(models.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockRepositoryProviderMockRecorder) CreateEntry(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockRepositoryProvider)(nil).CreateEntry), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockRepositoryProvider) CreateSession(arg0 context.Context, arg1 models.Session) (models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockRepositoryProviderMockRecorder) CreateSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockRepositoryProvider)(nil).CreateSession), arg0, arg1)
}

// CreateTransaction mocks base method.
func (m *MockRepositoryProvider) CreateTransaction(arg0 context.Context, arg1 models.Transaction) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockRepositoryProviderMockRecorder) CreateTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockRepositoryProvider)(nil).CreateTransaction), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockRepositoryProvider) CreateUser(arg0 context.Context, arg1 models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryProviderMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepositoryProvider)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockRepositoryProvider) CreateUserTx(arg0 context.Context, arg1 models.CreateUserTxParams) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockRepositoryProviderMockRecorder) CreateUserTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockRepositoryProvider)(nil).CreateUserTx), arg0, arg1)
}

// CreateVerifyEmail mocks base method.
func (m *MockRepositoryProvider) CreateVerifyEmail(arg0 context.Context, arg1 models.VerifyEmails) (models.VerifyEmails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(models.VerifyEmails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockRepositoryProviderMockRecorder) CreateVerifyEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockRepositoryProvider)(nil).CreateVerifyEmail), arg0, arg1)
}

// DeleteAccount mocks base method.
func (m *MockRepositoryProvider) DeleteAccount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockRepositoryProviderMockRecorder) DeleteAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockRepositoryProvider)(nil).DeleteAccount), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockRepositoryProvider) GetAccount(arg0 context.Context, arg1 int64) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockRepositoryProviderMockRecorder) GetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockRepositoryProvider)(nil).GetAccount), arg0, arg1)
}

// GetAccountForUpdate mocks base method.
func (m *MockRepositoryProvider) GetAccountForUpdate(arg0 context.Context, arg1 int64) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountForUpdate", arg0, arg1)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountForUpdate indicates an expected call of GetAccountForUpdate.
func (mr *MockRepositoryProviderMockRecorder) GetAccountForUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountForUpdate", reflect.TypeOf((*MockRepositoryProvider)(nil).GetAccountForUpdate), arg0, arg1)
}

// GetEntry mocks base method.
func (m *MockRepositoryProvider) GetEntry(arg0 context.Context, arg1 int64) (models.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntry", arg0, arg1)
	ret0, _ := ret[0].(models.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockRepositoryProviderMockRecorder) GetEntry(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockRepositoryProvider)(nil).GetEntry), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockRepositoryProvider) GetSession(arg0 context.Context, arg1 uuid.UUID) (models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockRepositoryProviderMockRecorder) GetSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockRepositoryProvider)(nil).GetSession), arg0, arg1)
}

// GetTransaction mocks base method.
func (m *MockRepositoryProvider) GetTransaction(arg0 context.Context, arg1 int64) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockRepositoryProviderMockRecorder) GetTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockRepositoryProvider)(nil).GetTransaction), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockRepositoryProvider) GetUser(arg0 context.Context, arg1 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryProviderMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepositoryProvider)(nil).GetUser), arg0, arg1)
}

// ListAccounts mocks base method.
func (m *MockRepositoryProvider) ListAccounts(arg0 context.Context, arg1 string, arg2, arg3 int32) ([]models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockRepositoryProviderMockRecorder) ListAccounts(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockRepositoryProvider)(nil).ListAccounts), arg0, arg1, arg2, arg3)
}

// ListEntries mocks base method.
func (m *MockRepositoryProvider) ListEntries(arg0 context.Context, arg1, arg2, arg3 int64) ([]models.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntries", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntries indicates an expected call of ListEntries.
func (mr *MockRepositoryProviderMockRecorder) ListEntries(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntries", reflect.TypeOf((*MockRepositoryProvider)(nil).ListEntries), arg0, arg1, arg2, arg3)
}

// ListTransactions mocks base method.
func (m *MockRepositoryProvider) ListTransactions(arg0 context.Context, arg1, arg2, arg3, arg4 int64) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockRepositoryProviderMockRecorder) ListTransactions(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockRepositoryProvider)(nil).ListTransactions), arg0, arg1, arg2, arg3, arg4)
}

// ListUsers mocks base method.
func (m *MockRepositoryProvider) ListUsers(arg0 context.Context, arg1, arg2 int32) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockRepositoryProviderMockRecorder) ListUsers(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockRepositoryProvider)(nil).ListUsers), arg0, arg1, arg2)
}

// TransferTx mocks base method.
func (m *MockRepositoryProvider) TransferTx(arg0 context.Context, arg1 models.TransferTxParams) (models.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", arg0, arg1)
	ret0, _ := ret[0].(models.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockRepositoryProviderMockRecorder) TransferTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockRepositoryProvider)(nil).TransferTx), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockRepositoryProvider) UpdateAccount(arg0 context.Context, arg1 int64, arg2 float64) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockRepositoryProviderMockRecorder) UpdateAccount(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockRepositoryProvider)(nil).UpdateAccount), arg0, arg1, arg2)
}

// UpdateUser mocks base method.
func (m *MockRepositoryProvider) UpdateUser(arg0 context.Context, arg1 models.UpdateUserParams) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryProviderMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepositoryProvider)(nil).UpdateUser), arg0, arg1)
}

// VerifyEmailTx mocks base method.
func (m *MockRepositoryProvider) VerifyEmailTx(arg0 context.Context, arg1 models.VerifyEmailTxParams) (models.VerifyEmailTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailTx", arg0, arg1)
	ret0, _ := ret[0].(models.VerifyEmailTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmailTx indicates an expected call of VerifyEmailTx.
func (mr *MockRepositoryProviderMockRecorder) VerifyEmailTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailTx", reflect.TypeOf((*MockRepositoryProvider)(nil).VerifyEmailTx), arg0, arg1)
}
